PROCEDURE "REGFORM_EDIT_DIST" (
    IN IN_ACTIVE_REQ_NO BIGINT,     
    IN IN_IDEAL_DIST_CODE BIGINT,
	IN IN_SAP_DIST_CODE VARCHAR(10),
	IN IN_ENTITY_CODE VARCHAR(10),
	IN IN_DIST_EMAIL VARCHAR(100),
	IN IN_DIST_NAME VARCHAR(100),
	IN IN_CREATION_TYPE INTEGER,
-- 	IN IN_STATUS INTEGER,
	IN ST_EVENTS "ST_REQUEST_EVENTS_LOG",   
	OUT OUT_SUCCESS VARCHAR(100),
	OUT OUT_ERROR_CODE BIGINT,       
	OUT OUT_ERROR_MESSAGE VARCHAR(1000),   
	OUT OUT_REQUEST_INFO "ST_REQUEST_INFO"    
)
	LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
    DECLARE LV_NEW_REQ_NO BIGINT;
	DECLARE LV_STATUS INTEGER;
	DECLARE LV_REQUEST_TYPE INTEGER;
	DECLARE LV_CURR_TIMESTAMP TIMESTAMP;
	DECLARE LV_OUT_SUCCESS VARCHAR(100);
	DECLARE LV_INVITE_CREATE_COMMENT VARCHAR(100);
	DECLARE LV_INVITE_APPROVE_COMMENT,LV_DIST_CODE VARCHAR(100);

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    RESIGNAL SET MESSAGE_TEXT = ::SQL_ERROR_MESSAGE;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE INTO OUT_ERROR_CODE,OUT_ERROR_MESSAGE FROM DUMMY;
    OUT_ERROR_CODE := null;
    OUT_ERROR_MESSAGE := null;
	
	OUT_SUCCESS := null;
	LV_DIST_CODE:='SE';
	LV_STATUS := 2;
	LV_REQUEST_TYPE := 5;
	LV_INVITE_CREATE_COMMENT := 'Update Request is auto-generated for Distributor Edit request';
-- 	LV_INVITE_APPROVE_COMMENT := 'Update Request is auto-approved for Supplier Edit request';

	-- Local Variable values assigning
	SELECT "REQUEST_NO".NEXTVAL INTO LV_NEW_REQ_NO FROM DUMMY;    
	
	SELECT CURRENT_TIMESTAMP INTO LV_CURR_TIMESTAMP FROM DUMMY;    

	INSERT INTO "DEALER_PORTAL_REQUEST_INFO"  
    (
		"REQUEST_NO","MOBILE_NO","SAP_DIST_CODE","IDEAL_DIST_CODE","STATUS","REGISTERED_ID","ENTITY_CODE","REQUEST_TYPE","CREATION_TYPE",
		"DIST_NAME1","DIST_NAME2","DIST_CODE","APPROVER_LEVEL","APPROVER_ROLE","REQUESTER_ID","BP_TYPE_CODE","BP_TYPE_DESC","REQUEST_RESENT","MDG_CR_NO","LAST_ACTIVE_REQ_NO","SECONDARY_EMAILS_ID","ORG_ESTAB_YEAR","WEBSITE",
		"VAT_REG_NUMBER","VAT_REG_DATE","VAT_CHECK","LAST_SAVED_STEP","COMPLETED_BY","COMPLETED_BY_POSITION","ACK_VALIDATION","SUBMISSION_DATE",
		"LAST_UPDATED_ON","OT_PARENT_ID" ,"OT_FOLDER1_ID","OT_FOLDER2_ID","OT_FOLDER3_ID","OT_FOLDER4_ID","NDA_TYPE","REMINDER_COUNT","BUYER_ASSIGN_CHECK",
		"CREATED_ON","COMMENT","LEGACY_ID","BU_CODE","TOT_PERM_EMP","TOT_TEMP_EMP","NOE_ACC","NOE_ADM","NOE_HR","NOE_QA","NOE_MAN","NOE_SAL","NOE_SEC","NOE_ANY","SAP_DIST_NO",
		"PROPOSAL_DATE","ENTITY_NAME","BUSINESS_NATURE","TERR_HOSP_ACC","SELLING_POINT","DIST_RECOMMMEDATION","DIST_RELATION","SALES_ASSOCIATE_ID","SA_APPROVED_ON","SAVED_AS_DRAFT","LIC_NO","LIC_NO_DATE",
		"REGISTERED_ADDR","OFFICE_ADDR","SHIP_TO_ADDR","WAREHOUSE_ADDR"
    )
    SELECT 
		:LV_NEW_REQ_NO,"MOBILE_NO","SAP_DIST_CODE","IDEAL_DIST_CODE",:LV_STATUS,"REGISTERED_ID","ENTITY_CODE",:LV_REQUEST_TYPE,"CREATION_TYPE",
		"DIST_NAME1","DIST_NAME2",:LV_DIST_CODE,"APPROVER_LEVEL","APPROVER_ROLE","REQUESTER_ID","BP_TYPE_CODE","BP_TYPE_DESC","REQUEST_RESENT","MDG_CR_NO","LAST_ACTIVE_REQ_NO","SECONDARY_EMAILS_ID","ORG_ESTAB_YEAR","WEBSITE",
		"VAT_REG_NUMBER","VAT_REG_DATE","VAT_CHECK","LAST_SAVED_STEP","COMPLETED_BY","COMPLETED_BY_POSITION","ACK_VALIDATION","SUBMISSION_DATE",
		:LV_CURR_TIMESTAMP,"OT_PARENT_ID" ,"OT_FOLDER1_ID","OT_FOLDER2_ID","OT_FOLDER3_ID","OT_FOLDER4_ID","NDA_TYPE","REMINDER_COUNT","BUYER_ASSIGN_CHECK",
		:LV_CURR_TIMESTAMP,:LV_INVITE_CREATE_COMMENT,"LEGACY_ID","BU_CODE","TOT_PERM_EMP","TOT_TEMP_EMP","NOE_ACC","NOE_ADM","NOE_HR","NOE_QA","NOE_MAN","NOE_SAL","NOE_SEC","NOE_ANY","SAP_DIST_NO",
		"PROPOSAL_DATE","ENTITY_NAME","BUSINESS_NATURE","TERR_HOSP_ACC","SELLING_POINT","DIST_RECOMMMEDATION","DIST_RELATION","SALES_ASSOCIATE_ID","SA_APPROVED_ON","SAVED_AS_DRAFT","LIC_NO","LIC_NO_DATE",
		"REGISTERED_ADDR","OFFICE_ADDR","SHIP_TO_ADDR","WAREHOUSE_ADDR"
    FROM "DEALER_PORTAL_REQUEST_INFO" WHERE "REQUEST_NO"=:IN_ACTIVE_REQ_NO;
	
	-- 2) Insert into Status Table: (Update request added with Active status as null)	

		INSERT INTO "DEALER_PORTAL_REQUEST_ACTIVE_STATUS" 
		VALUES(:LV_NEW_REQ_NO,null,:LV_REQUEST_TYPE, null,:IN_IDEAL_DIST_CODE);       
		
		
    -- 3) Insert into Events Table: (2 events created : Update request creation & Update request Approval)    
        INSERT INTO "DEALER_PORTAL_REQUEST_EVENTS_LOG"    
		(     
			"REQUEST_NO", "EVENT_NO", "EVENT_CODE","EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", "CREATED_ON"
		)
		SELECT 	:LV_NEW_REQ_NO, "EVENT_NO", "EVENT_CODE", "EVENT_TYPE", :IN_DIST_EMAIL, :IN_DIST_EMAIL, "REMARK", "COMMENT", :LV_CURR_TIMESTAMP
		FROM :ST_EVENTS;
        
		COMMIT;  
        
        IF :IN_ACTIVE_REQ_NO IS NOT null
	    THEN
	        CALL "SET_ACTIVE_DATA" (:LV_NEW_REQ_NO, :IN_ACTIVE_REQ_NO,:LV_REQUEST_TYPE,:IN_SAP_DIST_CODE, :IN_CREATION_TYPE,:LV_STATUS,:LV_OUT_SUCCESS);
	    END IF;
	         
	    IF :LV_OUT_SUCCESS = 'Success'           
	    THEN

		UPDATE "DEALER_PORTAL_REQUEST_INFO" SET "DIST_CODE"=:LV_DIST_CODE WHERE "REQUEST_NO"=:LV_NEW_REQ_NO;
	        COMMIT;
	        
	        --Return Request no. of new update request.
	        OUT_SUCCESS := :LV_NEW_REQ_NO;

			OUT_REQUEST_INFO =  SELECT * FROM "DEALER_PORTAL_REQUEST_INFO" WHERE "REQUEST_NO" = :LV_NEW_REQ_NO; 
	        
	    END IF;

	   
END