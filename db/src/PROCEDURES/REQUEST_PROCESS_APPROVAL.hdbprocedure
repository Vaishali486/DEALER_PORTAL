PROCEDURE "REQUEST_PROCESS_APPROVAL" (
    IN IN_ACTION VARCHAR(50),
	IN IN_REQUEST_NO INTEGER,
    -- IN IN_SUPPLIER_TYPE VARCHAR(50),
    IN IN_REQUEST_TYPE INTEGER,
    IN IN_REGISTERED_ID VARCHAR(100),
	IN IN_IDEAL_DIST_CODE BIGINT,
	IN IN_SAP_DIST_CODE VARCHAR(10),
	IN IN_REQNO_ACTIVE BIGINT,
	IN IN_REQTYPE_ACTIVE INTEGER,
	IN IN_CREATION_TYPE INTEGER,
	IN IN_STATUS INTEGER,
	IN IN_APPROVER_ROLE NVARCHAR(10),
	IN IN_APPROVER_LEVEL INTEGER,
	IN IN_ROLE_DESC NVARCHAR(20),
	IN ST_REQUEST_EVENTS_LOG "ST_REQUEST_EVENTS_LOG",	

	OUT OUT_SUCCESS VARCHAR(100),
	OUT OUT_ERROR_CODE BIGINT,
	OUT OUT_ERROR_MESSAGE VARCHAR(1000) 
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	--DEFAULT SCHEMA <default_schema_name>
	AS
BEGIN

	-- Local Variables:
	DECLARE LV_EVENT_COUNT NVARCHAR(50);
	DECLARE LV_EVENT_NO INTEGER;
	DECLARE LV_EVENT_CODE INTEGER;
	DECLARE LV_CURR_TIMESTAMP TIMESTAMP;
	DECLARE LV_OUT_SUCCESS VARCHAR(100);
	DECLARE LV_SUCCESS_ACTION VARCHAR(50);
	DECLARE LV_STATUS VARCHAR(50);
	DECLARE LV_ROLE_DESC NVARCHAR(50);
	
	-- DECLARE EXIT HANDLER FOR SQLEXCEPTION
    -- SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE INTO OUT_ERROR_CODE,OUT_ERROR_MESSAGE FROM DUMMY;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	RESIGNAL SET MESSAGE_TEXT = ::SQL_ERROR_MESSAGE; 
    OUT_ERROR_CODE := null;
    OUT_ERROR_MESSAGE := null;
    
	OUT_SUCCESS := null;
	LV_OUT_SUCCESS := null;
	LV_SUCCESS_ACTION := null;
	
	    SELECT CURRENT_TIMESTAMP INTO LV_CURR_TIMESTAMP FROM DUMMY;
		SELECT "DESCRIPTION" INTO LV_ROLE_DESC FROM "DEALER_PORTAL_MASTER_USER_ROLE" WHERE "CODE" = :IN_ROLE_DESC;
		
		IF (:IN_ACTION = 'APPROVE') 
	    THEN
	        
    	    IF :IN_REQUEST_TYPE = 1 OR :IN_REQUEST_TYPE = 2 OR :IN_REQUEST_TYPE = 3 OR :IN_REQUEST_TYPE = 6 OR IN_IDEAL_DIST_CODE IS NULL
    	    THEN
        	    SELECT "IDEAL_DIST_CODE".NEXTVAL INTO IN_IDEAL_DIST_CODE FROM DUMMY;

        	    INSERT INTO "DEALER_PORTAL_MASTER_IDEAL_SAP_DEALER_NO" VALUES(:IN_SAP_DIST_CODE,:IN_IDEAL_DIST_CODE,'');
    		END IF;
    		
    	    LV_STATUS := 2;
			LV_EVENT_CODE := 2;
    	    LV_SUCCESS_ACTION := 'Approved';
    	    
	        INSERT INTO "DEALER_PORTAL_REQUEST_ACTIVE_STATUS" VALUES(:IN_REQUEST_NO,null,:IN_REQUEST_TYPE, null,:IN_IDEAL_DIST_CODE);
	    
    	    IF :IN_STATUS IS NOT null
    	    THEN
    	        CALL "SET_ACTIVE_DATA" (:IN_REQUEST_NO, :IN_REQNO_ACTIVE,:IN_REQUEST_TYPE,:IN_SAP_DIST_CODE, :IN_CREATION_TYPE,:IN_STATUS,:LV_OUT_SUCCESS);
    	    ELSE
                LV_OUT_SUCCESS := 'Success';
			
			END IF;

			UPDATE "DEALER_PORTAL_REQUEST_INFO"
			SET 
			"STATUS" = :LV_STATUS,
			"IDEAL_DIST_CODE" = :IN_IDEAL_DIST_CODE,
			"APPROVER_LEVEL" =null,
			"APPROVER_ROLE"= null,
			"LAST_UPDATED_ON"=:LV_CURR_TIMESTAMP
			WHERE "REQUEST_NO" = :IN_REQUEST_NO AND "REGISTERED_ID" = :IN_REGISTERED_ID;

			LV_OUT_SUCCESS := 'Success';

		ELSEIF(:IN_ACTION = 'Approve_Pending')
		THEN
			LV_EVENT_CODE := 21;
			LV_STATUS := 15;
			LV_SUCCESS_ACTION := 'Sent To ' || :LV_ROLE_DESC || ' For Approval';

			UPDATE "DEALER_PORTAL_REQUEST_INFO"
			SET 
			"STATUS" = :LV_STATUS,
			"APPROVER_LEVEL" = :IN_APPROVER_LEVEL,
			"APPROVER_ROLE"= :IN_APPROVER_ROLE,
			"LAST_UPDATED_ON"=:LV_CURR_TIMESTAMP
			WHERE "REQUEST_NO" = :IN_REQUEST_NO AND "REGISTERED_ID" = :IN_REGISTERED_ID;

			LV_OUT_SUCCESS := 'Success';
	
	    ELSEIF (:IN_ACTION = 'REJECT')
	    THEN
	        LV_STATUS := 3;
			LV_EVENT_CODE := 3;
	        LV_SUCCESS_ACTION := 'Rejected';

		ELSEIF (:IN_ACTION = 'DELETE')
		THEN
				LV_STATUS := 14;
				LV_EVENT_CODE := 20;
				LV_SUCCESS_ACTION := 'Deleted';

		END IF;
		
		IF (:LV_SUCCESS_ACTION = 'Rejected' OR :LV_SUCCESS_ACTION = 'Deleted') THEN 

			UPDATE "DEALER_PORTAL_REQUEST_INFO"
			SET 
			"STATUS" = :LV_STATUS,
			"APPROVER_LEVEL" =null,
			"APPROVER_ROLE"= null,
			"LAST_UPDATED_ON"=:LV_CURR_TIMESTAMP
			WHERE "REQUEST_NO" = :IN_REQUEST_NO AND "REGISTERED_ID" = :IN_REGISTERED_ID;
			LV_OUT_SUCCESS := 'Success';

		END IF;

            
		IF :LV_OUT_SUCCESS = 'Success'
	    THEN
			SELECT COUNT(*) into LV_EVENT_COUNT FROM "DEALER_PORTAL_REQUEST_EVENTS_LOG" 
			WHERE "REQUEST_NO" = :IN_REQUEST_NO;

			LV_EVENT_NO := LV_EVENT_COUNT + 1;
			
			INSERT INTO "DEALER_PORTAL_REQUEST_EVENTS_LOG" 
			(
				"REQUEST_NO", "EVENT_NO", "EVENT_CODE","EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", "CREATED_ON"
			)
			SELECT :IN_REQUEST_NO, :LV_EVENT_NO, :LV_EVENT_CODE,"EVENT_TYPE", "USER_ID", "USER_NAME", "REMARK", "COMMENT", :LV_CURR_TIMESTAMP
			FROM :ST_REQUEST_EVENTS_LOG;

	        COMMIT;
		OUT_SUCCESS := 'Request No ' || :IN_REQUEST_NO || ' ' || :LV_SUCCESS_ACTION;
        ELSE
	        OUT_SUCCESS := null;
        END IF;
END